datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  accounts      Account[]
  sessions      Session[]
  calendarEvents CalendarEvent[]
  tasks         Task[]
  driveFiles    DriveFile[]
  emails        Email[]
  youtubePlaylists YouTubePlaylist[]
  youtubeVideos YouTubeVideo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  eventId     String   @unique
  summary     String
  description String?
  start       DateTime
  end         DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  taskId      String   @unique
  title       String
  notes       String?
  due         DateTime?
  status      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DriveFile {
  id          String   @id @default(cuid())
  userId      String
  fileId      String   @unique
  name        String
  mimeType    String
  webViewLink String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Email {
  id          String   @id @default(cuid())
  userId      String
  emailId     String   @unique
  subject     String
  snippet     String
  date        DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model YouTubePlaylist {
  id          String   @id @default(cuid())
  userId      String
  playlistId  String   @unique
  title       String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model YouTubeVideo {
  id          String   @id @default(cuid())
  playlistId  String
  videoId     String   @unique
  title       String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}